{"version":3,"sources":["App.module.css","components/button/Button.module.css","settingsModal/SettingsModal.module.css","components/button/Button.tsx","counter/seetingsForCounter/screenBlock/ScreenBlock.tsx","counter/seetingsForCounter/redux-reducer.ts","counter/seetingsForCounter/index.tsx","counter/seetingsForCounter/SettingsForCounter.tsx","counter/Counter.tsx","settingsModal/SettingsModal.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.ts","utils/localStorageUtills.ts","index.tsx","counter/Counter.module.css","counter/seetingsForCounter/SettingsForCounter.module.css","counter/seetingsForCounter/screenBlock/ScreenBlock.module.css"],"names":["module","exports","Button","props","className","s","button","onClick","callBack","disabled","title","ScreenBlock","value","changeValue","useState","setNumber","screenBlock","screenTitle","screenInput","type","onChange","e","currentTarget","slice","createSlice","name","initialState","minValue","maxValue","error","reducers","addValue","state","resetValue","action","setMinValue","payload","setMaxValue","setNewCounterSettings","localStorage","setItem","JSON","stringify","setCurrentValue","counterActions","counterSlice","actions","counterReducer","reducer","SettingsForCounter","closeModal","dispatch","useDispatch","useSelector","counter","counterError","maxValueFromStorage","getItem","minValueFromStorage","useEffect","Number","parse","setBlock","screen","minNum","maxNum","buttonsBlock","cancel","Counter","incrValue","openModal","currentValue","counterBlock","settingsBlock","SettingsModal","children","modalBlock","App","open","setOpen","wrap","resetNumber","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","subscribe","serializedState","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8cf560d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"App_wrap__13xEv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1UAoq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalBlock\":\"SettingsModal_modalBlock__3xt0g\"};","import React from 'react';\nimport s from './Button.module.css';\n\ntype PropsType = {\n    title: string\n    callBack: () => void\n    disabled : boolean\n\n}\n\nfunction Button(props: PropsType) {\n    const onClickHandler =()=>{\n        props.callBack()\n    }\n    return (\n        <button className={s.button} onClick={onClickHandler} disabled={props.disabled}>\n            {props.title}\n        </button>\n    );\n}\n\nexport default Button;\n","import React, {ChangeEventHandler, FC, useState} from 'react';\nimport s from './ScreenBlock.module.css';\n\ntype PropsType = {\n    title: string\n    changeValue: (value: number) => void\n    value: number\n}\n\n\nexport const ScreenBlock: FC<PropsType> = ({title, value, changeValue}) => {\n    //hooks\n    const [number, setNumber] = useState(0)\n\n    //handlers\n    const changeValueHandler = (e: any) => {\n        setNumber(e.currentTarget.value)\n        changeValue(e.currentTarget.value)\n    }\n\n\n    return (\n        <div className={s.screenBlock}>\n            <span className={s.screenTitle}>{title}</span>\n            <input className={s.screenInput}\n                   type=\"number\"\n                   value={value}\n                   onChange={changeValueHandler}\n            />\n        </div>\n    );\n}\n\nexport default ScreenBlock;\n","import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState= {\r\n    value: 0,\r\n    minValue: 1,\r\n    maxValue: 5,\r\n    error: false\r\n} as InitialStateType\r\ntype InitialStateType = {\r\n    value:number\r\n    minValue:number\r\n    maxValue:number\r\n    error:boolean\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'counter',\r\n    initialState: initialState,\r\n    reducers: {\r\n        addValue(state) {\r\n            if (state.value < state.maxValue) {\r\n                state.value = state.value + 1\r\n                state.error = false\r\n            }\r\n            if(state.value===state.maxValue){\r\n                state.error=true\r\n            }\r\n        },\r\n        resetValue: (state, action) => {\r\n            state.value = state.minValue\r\n            state.error = false\r\n        },\r\n        setMinValue(state, action) {\r\n\r\n            if (state.minValue < 0 || state.minValue === state.maxValue) {\r\n                state.error = true\r\n            } else {\r\n                state.minValue = action.payload\r\n                state.error = false\r\n            }\r\n            state.minValue = action.payload\r\n\r\n        }, setMaxValue(state, action) {\r\n            if (state.maxValue < 0 || state.maxValue === state.minValue) {\r\n                state.error = true\r\n            } else {\r\n                state.maxValue = action.payload\r\n                state.error = false\r\n            }\r\n            state.maxValue = action.payload\r\n\r\n\r\n        }, setNewCounterSettings(state) {\r\n            state.value = state.minValue\r\n            localStorage.setItem('maxValue', JSON.stringify(state.maxValue))\r\n            localStorage.setItem('minValue', JSON.stringify(state.minValue))\r\n        },\r\n        setCurrentValue(state, action) {\r\n            state.value = action.payload\r\n        }\r\n    }\r\n})\r\n\r\n","import {slice as counterSlice} from './redux-reducer'\r\n\r\nconst counterActions = {\r\n    ...counterSlice.actions\r\n}\r\n\r\nconst counterReducer  = counterSlice.reducer\r\n\r\nexport {\r\n    counterActions,\r\n    counterReducer\r\n}","import React, {FC, useEffect} from 'react';\nimport s from './SettingsForCounter.module.css';\nimport Button from \"../../components/button/Button\";\nimport ScreenBlock from \"./screenBlock/ScreenBlock\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {counterActions} from \"./index\";\n\ntype SettingForCounterPropsType = {\n    closeModal:()=>void\n}\n\nexport const SettingsForCounter:FC<SettingForCounterPropsType>=({closeModal}) =>{\n    //hooks\n    const dispatch = useDispatch()\n\n    const minValue = useSelector<AppStateType, number>(state => state.counter.minValue)\n    const maxValue = useSelector<AppStateType, number>(state => state.counter.maxValue)\n    const counterError = useSelector<AppStateType, boolean>(state => state.counter.error)\n\n    //localStorage\n    let maxValueFromStorage = localStorage.getItem('maxValue')\n    let minValueFromStorage = localStorage.getItem('minValue')\n\n    useEffect(() => {\n        if (minValueFromStorage) {\n            dispatch(setMinValue(Number(JSON.parse(minValueFromStorage))))\n\n        }\n    }, [])\n    useEffect(() => {\n        if (maxValueFromStorage) {\n            dispatch(setMaxValue(Number(JSON.parse(maxValueFromStorage))))\n        }\n    }, [])\n\n    //actions\n    const {setNewCounterSettings, setMinValue, setMaxValue, setCurrentValue} = counterActions\n\n    //handlers\n    const changeMinValueFunc = (minNum: number) => {\n        dispatch(setMinValue(minNum))\n    }\n    const setNewSettingsFunc = () => {\n        dispatch(setNewCounterSettings())\n        closeModal()\n    }\n    const changeMaxValueFunc = (maxNum: number) => {\n        dispatch(setMaxValue(maxNum))\n    }\n\n    function closeModalHandler() {\n        closeModal()\n    }\n\n    return (\n        <div className={s.setBlock}>\n            <h1 className={s.title}>Settings for Counter</h1>\n            <div className={s.screen}>\n                <ScreenBlock\n                    title={'minValue'}\n                    value={minValue}\n                    changeValue={changeMinValueFunc}\n                />\n                <ScreenBlock\n                    title={'maxValue'}\n                    value={maxValue}\n                    changeValue={changeMaxValueFunc}\n                />\n            </div>\n            <div className={s.buttonsBlock}>\n                <Button title={'SET'} callBack={setNewSettingsFunc} disabled={counterError}/>\n            </div>\n            <button\n                className={s.cancel}\n                onClick={closeModalHandler}\n            >X</button>\n        </div>\n    );\n}\n\nexport default SettingsForCounter;\n","import React, {FC, useEffect} from 'react';\nimport s from './Counter.module.css';\nimport Button from \"../components/button/Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../redux/redux-store\";\nimport {counterActions} from \"./seetingsForCounter\";\n\ntype PropsType = {\n\n    incrValue: () => void\n    resetValue: (resetNumber: number) => void\n    openModal: () => void\n}\n\nexport const Counter: FC<PropsType> = ({incrValue, resetValue, openModal}) => {\n    const {setCurrentValue} = counterActions\n\n    //hooks\n    const error = useSelector<AppStateType, boolean>(state => state.counter.error)\n    const currentValue = useSelector<AppStateType, number>(state => state.counter.value)\n    const dispatch = useDispatch()\n\n    const minValue = localStorage.getItem('minValue')\n    if (minValue) {\n        JSON.parse(minValue)\n    }\n\n\n    useEffect(() => {\n        dispatch(setCurrentValue(Number(minValue)))\n    }, [dispatch])\n\n\n    const incrValueHandler = () => {\n        incrValue()\n        localStorage.setItem('1', '1')\n    }\n    const resetValueHandler = () => {\n        resetValue(0)\n    }\n\n    function openModalHandler() {\n        openModal()\n    }\n\n    return (\n        <div className={s.counterBlock}>\n            <h1 className={s.title}>Counter</h1>\n            <div className={s.screen}>\n                <span className={error ? s.error : ''}>\n                    {currentValue}\n                </span>\n            </div>\n            <div className={s.buttonsBlock}>\n                <Button title={'Incr'} callBack={incrValueHandler} disabled={error}/>\n                <Button title={'Reset'} callBack={resetValueHandler} disabled={false}/>\n            </div>\n            <div className={s.settingsBlock}>\n                <button onClick={openModalHandler}>settings</button>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Counter;\n","import {FC} from \"react\";\r\n\r\nimport s from './SettingsModal.module.css';\r\n\r\nexport const SettingsModal:FC<any>= ({children})=>{\r\n    return(\r\n        <div className={s.modalBlock}>{children}</div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport s from './App.module.css';\nimport {useDispatch} from \"react-redux\";\nimport SettingsForCounter from \"./counter/seetingsForCounter/SettingsForCounter\";\nimport {Counter} from \"./counter/Counter\";\nimport {counterActions} from \"./counter/seetingsForCounter\";\nimport {SettingsModal} from \"./settingsModal/SettingsModal\";\n\nfunction App() {\n    //hooks\n    const dispatch = useDispatch()\n    const [open, setOpen] = useState(false)\n\n    //actions\n    const {addValue, resetValue} = counterActions\n\n    //handlers\n    const incrValueFunc = () => {\n        dispatch(addValue())\n    }\n    const resetValueFunc = (resetNumber: number) => {\n        dispatch(resetValue(resetNumber))\n    }\n    const closeModalHandler = () => {\n        setOpen(false)\n    }\n    const openModalHandler = () => {\n        setOpen(true)\n    }\n    return (\n        <div className={s.wrap}>\n            <Counter\n                incrValue={incrValueFunc}\n                resetValue={resetValueFunc}\n                openModal={openModalHandler}\n            />\n            {open &&\n                <SettingsModal>\n                    <SettingsForCounter closeModal={closeModalHandler}/>\n                </SettingsModal>\n            }\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {saveState} from \"../utils/localStorageUtills\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {counterReducer} from \"../counter/seetingsForCounter\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter:store.getState().counter\r\n    });\r\n});\r\n\r\n\r\n\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type StoreType = typeof store","import {AppStateType} from \"../redux/redux-store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\n\r\n// store.js\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/redux-store\";\n\nReactDOM.render(\n  <React.StrictMode>\n            <Provider store={store}>\n                <App />\n            </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterBlock\":\"Counter_counterBlock__3jsxs\",\"title\":\"Counter_title__2z_hA\",\"screen\":\"Counter_screen__7lrMJ\",\"buttonsBlock\":\"Counter_buttonsBlock__3j44S\",\"error\":\"Counter_error__3-TCj\",\"screenText\":\"Counter_screenText__1i3WN\",\"settingsBlock\":\"Counter_settingsBlock__2U6sg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setBlock\":\"SettingsForCounter_setBlock__fSW4F\",\"title\":\"SettingsForCounter_title__19WbB\",\"screen\":\"SettingsForCounter_screen__ILVTT\",\"buttonsBlock\":\"SettingsForCounter_buttonsBlock__3VJ8H\",\"active\":\"SettingsForCounter_active__TSoRW\",\"cancel\":\"SettingsForCounter_cancel__2j1kF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"screenBlock\":\"ScreenBlock_screenBlock__1wIOn\",\"screenInput\":\"ScreenBlock_screenInput__2l1P3\",\"errorInput\":\"ScreenBlock_errorInput__1bPAm\"};"],"sourceRoot":""}